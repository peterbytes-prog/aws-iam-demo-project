AWSTemplateFormatVersion: "2010-09-09"
Description: "Hotel Website"
Parameters:

  VpcCIDR:
    Default: 10.32.0.0/16
    Description: "The CIDR block for the VPC"
    Type: String
    AllowedValues:
      - 10.32.0.0/16

  SubnetCIDR:
    Default: 10.32.0.0/24
    Description: "CIDR for public subnet"
    Type: String
    AllowedValues:
      - 10.32.0.0/24
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

Resources:
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
       - Key: Name
         Value: "Hotel IAM VPC"

  subnet:
    Type: "AWS::EC2::Subnet"
    Properties:
     VpcId: !Ref VPC
     AvailabilityZone:
      Fn::Select:
      - 0
      - Fn::GetAZs: ''
     CidrBlock: !Ref SubnetCIDR
     MapPublicIpOnLaunch: true
     Tags:
      - Key: Name
        Value: "Hotel IAM subnet"

  IGW:
    Type: "AWS::EC2::InternetGateway"
    DependsOn: VPC
  AttachGateway:
    Type: "AWS::EC2::VPCGatewayAttachment"
    DependsOn:
      - VPC
      - IGW
    Properties:
     VpcId: !Ref VPC
     InternetGatewayId: !Ref IGW

  ec2Route:
    Type: "AWS::EC2::RouteTable"
    DependsOn:
      - VPC
      - AttachGateway
    Properties:
      VpcId: !Ref VPC

  routeOut:
    Type: "AWS::EC2::Route"
    DependsOn:
      - ec2Route
      - AttachGateway
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
      RouteTableId: !Ref ec2Route

  SubnetRouteAssociate:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    DependsOn:
      - ec2Route
      - subnet
    Properties:
      RouteTableId: !Ref ec2Route
      SubnetId: !Ref subnet

  S3Bucket: #website bucket
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join
      - "-"
      - - "pr-photo-bucket"
        - !Select
          - 0
          - !Split
            - "-"
            - !Select
              - 2
              - !Split
                - "/"
                - !Ref "AWS::StackId"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        IgnorePublicAcls: false
        BlockPublicPolicy: false
        RestrictPublicBuckets: false
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Statement:
          Action:
            - s3:GetObject
          Effect: Allow
          Principal: "*"
          Resource:
            - !Sub "arn:aws:s3:::${S3Bucket}/*"
            - !Sub "arn:aws:s3:::${S3Bucket}"
  S3Instance:
    Type: "AWS::EC2::Instance"
    Properties:
      InstanceType: t2.micro
      SubnetId: !Ref subnet
      IamInstanceProfile: !Ref S3CopyProfile
      ImageId: !Ref LatestAmiId
      UserData:
        Fn::Base64:
          !Sub |
          #!/bin/bash -xe
          export bucket=`aws s3api list-buckets --query "Buckets[].Name" | grep pr-photo-bucket | tr -d ',' | sed -e 's/"//g' | xargs`
          wget https://aws-tc-largeobjects.s3-us-west-2.amazonaws.com/DEV-AWS-MO-Identity/index.html
          sed -i "s/<FMI_1>/$bucket/g" index.html
          aws s3 cp index.html s3://${S3Bucket}/index.html
  #
  S3CopyProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - Ref: S3CopyRole
  S3CopyPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: S3CopyPolicy
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action:
          - s3:ListBucket
          - s3:PutObject
          - s3:GetObject
          - s3:PubObjectAcl
          - s3:ListAllMyBuckets
          Resource: '*'
      Roles:
        - Ref: S3CopyRole
  S3CopyRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
  SysAdmin: # have ec2 related access
    Type: AWS::IAM::Group
    Properties:
      GroupName: SysAdmins
  SysAdminPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: SysAdmin
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'ec2:*'
            Resource: '*'
      Groups:
        - !Ref SysAdmin
  Jane:
      Type: AWS::IAM::User
      Properties:
        Groups:
          - !Ref SysAdmin
        UserName: Jane
  FinancePolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: Finance
      PolicyDocument:
        Version: 2012-10-17
        Statement:
            Action:
              - budgets:ViewBudget
              - ce:GetTags
              - ce:GetDimensionValues
              - ce:GetReservationCoverage
              - ce:GetReservationUtilization
              - ce:GetCostAndUsage
            Effect: Allow
            Resource: '*'
      Groups:
        - !Ref Finance
  Finance:
    Type: AWS::IAM::Group
    Properties:
      GroupName: FinanceGroup
  Bob:
      Type: AWS::IAM::User
      Properties:
        Groups:
          - !Ref Finance
        UserName: Bob
  SecurityPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: Security
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'iam:Get*'
              - 'iam:List*'
            Resource: '*'
      Groups:
        - !Ref Security
  Security:
    Type: AWS::IAM::Group
    Properties:
      GroupName: SecurityGroup
  Sofia:
      Type: AWS::IAM::User
      Properties:
        Groups:
          - !Ref Security
        UserName: Sofia
  PRGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: PRGroup
  PRGroupPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: PRGroup
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'sts:AssumeRole'
            Resource: !GetAtt PRLambdaModifierRole.Arn
      Groups:
        - !Ref PRGroup
  PRLambdaModifierRole: # pr employee can assume role to manage lambda function
    Type: AWS::IAM::Role
    Properties:
      RoleName: PRLambdaModifierRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            AWS:
              - !Sub "arn:aws:iam::${AWS::AccountId}:root"
          Action:
          - sts:AssumeRole
      Path: "/"
  PRuser:
    Type: AWS::IAM::User
    Properties:
      Groups:
        - !Ref PRGroup
      UserName: PRuser
      LoginProfile:
        Password: gwNcaaV&mQn8
  S3BucketRaw: #bucket to upload images by employee with specify role
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${S3Bucket}-raw"
  PRLambdaModifierPolicy: #for pr employee to create and modify lambda related resources
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      ManagedPolicyName: "PRLambdaModifierPolicy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - s3:*
              # - lambda:CreateFunction # already created
              - lambda:UpdateFunctionEventInvokeConfig
              - lambda:InvokeFunction
              - lambda:ListVersionsByFunction
              - lambda:GetFunction
              - lambda:UpdateFunctionConfiguration
              - lambda:GetFunctionConfiguration
              - lambda:UpdateFunctionCode
              - lambda:ListFunctions
              - lambda:GetAccountSettings
              - iam:PassRole
              - iam:ListRoles
              - lambda:AddPermission
              - lambda:ListTags
              # - lambda:DeleteFunction # not allowed
              - lambda:PublishVersion
              - lambda:RemovePermission
              - lambda:GetPolicy
            Resource: "*"
      Roles:
       - !Ref PRLambdaModifierRole
  LambdaPRResizerRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: LambdaPRResizerRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - 'sts:AssumeRole'
  LambdaPRResizerRolePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: "PRLambdaAssumedRolePolicy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - sts:AssumeRole
            Resource:
              - !GetAtt LambdaPRResizerRole.Arn
          - Effect: Allow
            Action:
              - logs:*
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:PutObject
            Resource: arn:aws:s3:::*
      Roles:
        - !Ref LambdaPRResizerRole
  PRCreateThumbnail:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.10
      Handler: index.handler
      Role: !GetAtt LambdaPRResizerRole.Arn
      Timeout: 20
      Code:
        ZipFile: |
          def handler(event, context):
            message = 'Hello {} {}!'.format(event['first_name'], event['last_name'])
            return {
                'message' : message
            }
  S3Instance:
    Type: "AWS::EC2::Instance"
    Properties:
      InstanceType: t2.micro
      SubnetId: !Ref subnet
      IamInstanceProfile: !Ref S3CopyProfile
      ImageId: !Ref LatestAmiId
      UserData:
        Fn::Base64:
          !Sub |
          #!/bin/bash -xe
          export bucket=`aws s3api list-buckets --query "Buckets[].Name" | grep pr-photo-bucket | tr -d ',' | sed -e 's/"//g' | xargs`
          wget https://aws-tc-largeobjects.s3-us-west-2.amazonaws.com/DEV-AWS-MO-Identity/index.html
          sed -i "s/<FMI_1>/$bucket/g" index.html
          sed -i 's/s3-us-west-2/${AWS::Region}/g' index.html
          aws s3 cp index.html s3://${S3Bucket}/index.html
Outputs:
  S3Bucket:
    Description: "Name of S3 bucket"
    Value: !Ref S3Bucket
  WebsiteURL:
    Description: "URL for website hosted on S3"
    Value: !GetAtt [S3Bucket, WebsiteURL]